!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
ACTIVE	discord.hpp	/^      ACTIVE,$/;"	e	enum:discord::Connection::state
Bot	bot.cpp	/^  Bot::Bot() { Bot(".", '\\0'); }$/;"	f	class:discord::Bot
Bot	bot.cpp	/^  Bot::Bot(std::string token, char ref) : token{U(token)}, ref{ref} {$/;"	f	class:discord::Bot
Bot	bot.hpp	/^    Bot() : ref{'\\0'}, token{std::string{"."}} {};$/;"	f	class:Bot
Bot	bot.hpp	/^class Bot {$/;"	c
Bot	discord.hpp	/^  class Bot {$/;"	c	namespace:discord
Connection	connection.cpp	/^  Connection::Connection()$/;"	f	class:discord::Connection
Connection	connection.cpp	/^  Connection::Connection(bool compress, std::string token, state status, encoding enc)$/;"	f	class:discord::Connection
Connection	discord.hpp	/^  class Connection {$/;"	c	namespace:discord
DEAD	discord.hpp	/^      DEAD$/;"	e	enum:discord::Connection::state
DISPATCH	discord.hpp	/^    DISPATCH = 0,$/;"	e	enum:discord::opcodes
ETF	discord.hpp	/^      ETF$/;"	e	enum:discord::Connection::encoding
HEARTBEAT	discord.hpp	/^    HEARTBEAT = 1,$/;"	e	enum:discord::opcodes
HEARTBEAT_ACK	discord.hpp	/^    HEARTBEAT_ACK = 11$/;"	e	enum:discord::opcodes
HELLO	discord.hpp	/^    HELLO = 10,$/;"	e	enum:discord::opcodes
IDENTIFY	discord.hpp	/^    IDENTIFY = 2,$/;"	e	enum:discord::opcodes
INVALID_SESS	discord.hpp	/^    INVALID_SESS = 8,$/;"	e	enum:discord::opcodes
JSON	discord.hpp	/^      JSON,$/;"	e	enum:discord::Connection::encoding
RECONNECT	discord.hpp	/^    RECONNECT = 6,$/;"	e	enum:discord::opcodes
REQUEST_GUILD_MEMBERS	discord.hpp	/^    REQUEST_GUILD_MEMBERS = 7,$/;"	e	enum:discord::opcodes
RESUME	discord.hpp	/^    RESUME = 5,$/;"	e	enum:discord::opcodes
SLEEP	discord.hpp	/^      SLEEP,$/;"	e	enum:discord::Connection::state
STATUS_UPDATE	discord.hpp	/^    STATUS_UPDATE = 3,$/;"	e	enum:discord::opcodes
VOICE_UPDATE	discord.hpp	/^    VOICE_UPDATE = 4,$/;"	e	enum:discord::opcodes
__BOT_HPP__	bot.hpp	/^#define __BOT_HPP__$/;"	d
__DISCORD_HPP__	discord.hpp	/^#define __DISCORD_HPP__$/;"	d
__UTILS_HPP__	utils.hpp	/^#define __UTILS_HPP__$/;"	d
__anon0669ccc60102	connection.cpp	/^    return client.request(request).then([](web::http::http_response response) -> nlohmann::json /;"	f	function:discord::Connection::get_wss	typeref:typename:nlohmann::json	file:
__anon0669ccc60202	connection.cpp	/^    return client.receive().then([](websocket_incoming_message msg) {$/;"	f	function:discord::Connection::send_payload	file:
__anon0669ccc60302	connection.cpp	/^    client.connect(uri).then([this]() {$/;"	f	function:discord::Connection::handshake	file:
__anonceeb217e0102	discord.cpp	/^  return client.request(request).then([](web::http::http_response response) -> nlohmann::json {$/;"	f	function:get_wss	typeref:typename:nlohmann::json	file:
__anonceeb217e0202	discord.cpp	/^  wss_client.connect(uri).then([]() {$/;"	f	function:send_payload	file:
__anonceeb217e0302	discord.cpp	/^  return wss_client.receive().then([](websocket_incoming_message msg) {$/;"	f	function:send_payload	file:
__anonfcd100560102	test.cpp	/^  return client.request(request).then([](web::http::http_response response) {$/;"	f	function:get_wss	file:
buffer_lock	discord.hpp	/^      std::mutex buffer_lock;$/;"	m	class:discord::Connection	typeref:typename:std::mutex
client	discord.hpp	/^      wss_client client;$/;"	m	class:discord::Connection	typeref:typename:wss_client
compress	discord.hpp	/^      bool compress; \/\/ only supports zlib stream for now$/;"	m	class:discord::Connection	typeref:typename:bool
connection	discord.hpp	/^      Connection connection;$/;"	m	class:discord::Bot	typeref:typename:Connection
d	discord.hpp	/^    nlohmann::json d;$/;"	m	struct:discord::payload	typeref:typename:nlohmann::json
discord	bot.cpp	/^namespace discord {$/;"	n	file:
discord	connection.cpp	/^namespace discord {$/;"	n	file:
discord	discord.hpp	/^namespace discord$/;"	n
discord	utils.cpp	/^namespace discord {$/;"	n	file:
encoding	discord.hpp	/^    typedef enum encoding {$/;"	g	class:discord::Connection
encoding	discord.hpp	/^    } encoding;$/;"	t	class:discord::Connection	typeref:enum:discord::Connection::encoding
encoding_type	discord.hpp	/^      encoding encoding_type;$/;"	m	class:discord::Connection	typeref:typename:encoding
end	connection.cpp	/^  void Connection::end()$/;"	f	class:discord::Connection	typeref:typename:void
end	discord.cpp	/^end()$/;"	f	typeref:typename:void
get_wss	connection.cpp	/^  pplx::task<nlohmann::json> Connection::get_wss()$/;"	f	class:discord::Connection	typeref:typename:pplx::task<nlohmann::json>
get_wss	discord.cpp	/^get_wss(const std::string &token)$/;"	f	typeref:typename:pplx::task<nlohmann::json>
get_wss	test.cpp	/^pplx::task<web::http::http_response> get_wss(const std::string &token)$/;"	f	typeref:typename:pplx::task<web::http::http_response>
handle_gateway	connection.cpp	/^  void Connection::handle_gateway()$/;"	f	class:discord::Connection	typeref:typename:void
handshake	connection.cpp	/^  void Connection::handshake()$/;"	f	class:discord::Connection	typeref:typename:void
heartbeat	discord.hpp	/^      int heartbeat;$/;"	m	class:discord::Connection	typeref:typename:int
heartbeat_thread	discord.hpp	/^      std::thread heartbeat_thread;$/;"	m	class:discord::Connection	typeref:typename:std::thread
last_sequence_data	discord.hpp	/^      int last_sequence_data;$/;"	m	class:discord::Connection	typeref:typename:int
login	bot.cpp	/^  void Bot::login()$/;"	f	class:discord::Bot	typeref:typename:void
main	main.cpp	/^main()$/;"	f	typeref:typename:int
main	test.cpp	/^int main() {$/;"	f	typeref:typename:int
op	discord.hpp	/^    opcodes op;$/;"	m	struct:discord::payload	typeref:typename:opcodes
opcodes	discord.hpp	/^  typedef enum opcodes {$/;"	g	namespace:discord
opcodes	discord.hpp	/^  } opcodes;$/;"	t	namespace:discord	typeref:enum:discord::opcodes
package	connection.cpp	/^  nlohmann::json Connection::package(const payload &payload)$/;"	f	class:discord::Connection	typeref:typename:nlohmann::json
package	discord.cpp	/^package(const payload &payload)$/;"	f	typeref:typename:nlohmann::json
payload	discord.hpp	/^  typedef struct payload {$/;"	s	namespace:discord
payload	discord.hpp	/^  } payload;$/;"	t	namespace:discord	typeref:struct:discord::payload
payload	utils.cpp	/^  payload::payload(opcodes op) { payload(op, 0, "null", {}); }$/;"	f	class:discord::payload
payload	utils.cpp	/^  payload::payload(opcodes op, int s, std::string t, nlohmann::json d) :$/;"	f	class:discord::payload
pulse	connection.cpp	/^  void Connection::pulse()$/;"	f	class:discord::Connection	typeref:typename:void
pulse	discord.cpp	/^pulse()$/;"	f	typeref:typename:void
ref	bot.hpp	/^    char ref;$/;"	m	class:Bot	typeref:typename:char
ref	discord.hpp	/^      char ref;$/;"	m	class:discord::Bot	typeref:typename:char
run	bot.cpp	/^  int Bot::run()$/;"	f	class:discord::Bot	typeref:typename:int
s	discord.hpp	/^    int s;$/;"	m	struct:discord::payload	typeref:typename:int
send_payload	connection.cpp	/^  pplx::task<nlohmann::json> Connection::send_payload(const nlohmann::json &payload)$/;"	f	class:discord::Connection	typeref:typename:pplx::task<nlohmann::json>
send_payload	discord.cpp	/^send_payload(const payload &payload)$/;"	f	typeref:typename:pplx::task<nlohmann::json>
session_id	discord.hpp	/^      int session_id;$/;"	m	class:discord::Connection	typeref:typename:int
sharding	discord.hpp	/^      int sharding;$/;"	m	class:discord::Connection	typeref:typename:int
snowflake	discord.hpp	/^      snowflake_t snowflake;$/;"	m	class:discord::Connection	typeref:typename:snowflake_t
snowflake_t	discord.hpp	/^  typedef uint64_t snowflake_t;$/;"	t	namespace:discord	typeref:typename:uint64_t
state	discord.hpp	/^    typedef enum state {$/;"	g	class:discord::Connection
state	discord.hpp	/^    } state;$/;"	t	class:discord::Connection	typeref:enum:discord::Connection::state
status	discord.hpp	/^      state status;$/;"	m	class:discord::Connection	typeref:typename:state
t	discord.hpp	/^    std::string t;$/;"	m	struct:discord::payload	typeref:typename:std::string
token	bot.hpp	/^    std::string token;$/;"	m	class:Bot	typeref:typename:std::string
token	discord.hpp	/^      std::string token;$/;"	m	class:discord::Bot	typeref:typename:std::string
token	discord.hpp	/^      std::string token;$/;"	m	class:discord::Connection	typeref:typename:std::string
uri	discord.hpp	/^      std::string uri;$/;"	m	class:discord::Connection	typeref:typename:std::string
websocket_incoming_message	discord.hpp	/^  typedef web::websockets::client::websocket_incoming_message websocket_incoming_message;$/;"	t	namespace:discord	typeref:typename:web::websockets::client::websocket_incoming_message
websocket_outgoing_message	discord.hpp	/^  typedef web::websockets::client::websocket_outgoing_message websocket_outgoing_message;$/;"	t	namespace:discord	typeref:typename:web::websockets::client::websocket_outgoing_message
wss_client	discord.hpp	/^  typedef web::websockets::client::websocket_client wss_client;$/;"	t	namespace:discord	typeref:typename:web::websockets::client::websocket_client
